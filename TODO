- GA: partial generate-inst
- extra: get-state, get-state-liveness, proper-machine-config, gererate-input-states, counterexample, get-live-in
- don't mask-in forward
- do we need get-state-liveness?
- get rid of proper-machine-config
- inverse: interpret-inst is for vector. why??? BIG TODO

Questions
- get rid of "extra" in get-state, proper-machine-config => using queue for recv
- get rid of get-live-list (use progstatet->vector?)
- when not constrain mem, but do use mem
- GA: (progstate-structure) using vector
  = get-state, clone-state, evaluate-state**
- GA: (get) & (set)
  = update-live, update-live-backward [only works of progstate matches vector at those fields] (partially)
  = inverse [override]
  = (get-arg-ranges)** uses arg & (get-valid-opcode)** users ins

  = (mask-in state-vec) may work
- get rid of prescreen in forwardbackward (use get-valid-opcode-pool instead).
- progstate-vector conversion OR no conversion
- get rid of flag? ARM uses flag to prune search space in enumerator
  = user should be able to filter valid opcodes using flag-in/flag-out, but not by implementing (generate-inst)*
  = make connection between (get-flag) and this new prunnign function

- (get-arg-type) & (get-arg-ranges) take opcode-id not opcode-name
- ref in memory-racket

Test on:
- llvm
- preston
- GA
- ARM

1. Revisit
   - get rid of "extra" in get-state, proper-machine-config
   - do we need (combine-live)  in forwardbackward?
   - template/test-simulator.rkt include validator.rkt for sym-input
   - (reduce-precesion) in forwardbackward
   - (get-flag) in enumerator
   - change "public" to "protected"
   - progstate->vector
   - do we need to extend enumerator, inverse, etc. at all?

2. May need to override these functions
   - (reduce-precesion) in forwardbackward
   - (get-val-range) in inverse
3. Documentation 
   - efficient memory access. memory access operates in a granularity of # of bits defined
   - bit, const => reduce bitwidth
   - update-progstate-ins-load -store
   - want stact, contact me
   - say that (get) & (set) is used for update-live, update-live-backward, and inverse
     (get-arg-ranges) & (get-valid-opcode)
   - #:try-cmp? in enumerator, (try-cmp?) in forwardbackward
4. Increase precision in enum
   - synthesize constrants
   - in reduced-bitwidth domain: try all 4-bit constants
   - e.g. Preston load1


- No longer need validator:proper-machine-config if we use the new memory access support.
  => Will memory object slowdown the interpreter?
  => keep ARM & GA as is.

Profile:
preston/program/ex1 on kaopad
stoch -s: 6, 20, 2, 4*, 1


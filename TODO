TODO
* user don't have to provide live-in for stoch, use result from combine-live too [test stoch]
  - test regression
- get rid of live-in parser

Correctness
- how to prevent users from making a mistake on machine description (ins & outs).
  = e.g. putting arg 0 to be output of str# => backward can't find solution.
  = SOLUTION: extract ins & outs from simulator!!!

1. Revisit
   - remove (debug-inst) in forwardbackward & live-in in stoch
   - template

2. May need to override these functions
   - (reduce-precesion) in forwardbackward
3. Documentation 
   - config:
     = when testing (new machine% [config ?])
     = when using parallel driver, printer:compress-state-space
     = config can be use in program-structor, define-arg-type
   - efficient memory access. memory access operates in a granularity of # of bits defined
   - update-progstate-ins-load -store
   - want stack, contact me
   - say that (get) & (set) is used for update-live, update-live-backward, and inverse
     (get-arg-ranges) & (get-valid-opcode)
   - #:try-cmp? in enumerator, (try-cmp?) in forwardbackward
   - limited size of memory & queue
   - make connection between (get-flag) and (filther-with-flags)
   - define-progstate-stype #:const #:min #:max
   - define-instruction-class #:args #:ins #:outs #:commute #:required
   - default arg-type: const, bit => reduce-precision
   - combine-live & update-live (GA)
   - mask-in & get-pruning-info
4. Increase precision in enum
   - synthesize constrants
   - in reduced-bitwidth domain: try all 4-bit constants
   - e.g. Preston load1


- No longer need validator:proper-machine-config if we use the new memory access support.
  => Will memory object slowdown the interpreter?
  => keep ARM & GA as is.

Profile:
preston/program/ex1 on kaopad
stoch -s: 6, 20, 2, 4*, 1


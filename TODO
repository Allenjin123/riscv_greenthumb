* ARM gen inverse behavior is extremely slow.

Performance
- don't mask-in the start state
- mask-in & mask-in again (ARM)

ARM
- remove inst->vector in forwardbackward
- remove arm-inst.rkt
- remove compress.rkt
- (get-arg-type) & (get-arg-ranges) take opcode-id not opcode-name
- do we need get-state-liveness?
- get rid of proper-machine-config => adjust mem-size
- do we need old-liveout in inverse interpret?
- get rid of get-live-list (use progstatet->vector or not at all)
- do we need combine-live in forwardbackward?
- get rid of set-config???
- get rid of relaxed-state-eq?

Test on:
- llvm
- preston
- GA
- ARM

1. Revisit
   - inst.rkt
   - template
   - (reduce-precesion) in forwardbackward
   - (get-flag) in enumerator
   - change "public" to "protected"
   - do we need to extend enumerator, inverse, etc. at all?

2. May need to override these functions
   - (reduce-precesion) in forwardbackward
3. Documentation 
   - efficient memory access. memory access operates in a granularity of # of bits defined
   - bit, const => reduce bitwidth
   - update-progstate-ins-load -store
   - want stact, contact me
   - say that (get) & (set) is used for update-live, update-live-backward, and inverse
     (get-arg-ranges) & (get-valid-opcode)
   - #:try-cmp? in enumerator, (try-cmp?) in forwardbackward
   - limited size of memory & queue
   - make connection between (get-flag) and (filther-with-flags)
4. Increase precision in enum
   - synthesize constrants
   - in reduced-bitwidth domain: try all 4-bit constants
   - e.g. Preston load1


- No longer need validator:proper-machine-config if we use the new memory access support.
  => Will memory object slowdown the interpreter?
  => keep ARM & GA as is.

Profile:
preston/program/ex1 on kaopad
stoch -s: 6, 20, 2, 4*, 1

